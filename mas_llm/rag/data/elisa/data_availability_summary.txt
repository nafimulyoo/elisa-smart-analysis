# Source: ChatGPT 4o

Sistem ELISA (Energy and Water Information System) mengumpulkan berbagai data terkait penggunaan energi listrik dan air. Berikut adalah rincian mengenai jenis data listrik yang diukur oleh ELISA serta analisis yang dapat dilakukan dari data tersebut:

### Data Listrik yang Diukur oleh ELISA

1. **Penggunaan Energi Listrik**
   - **Total Konsumsi Energi**: Pengukuran total penggunaan energi listrik dalam kWh untuk setiap unit atau gedung.
   - **Konsumsi Harian**: Data penggunaan listrik per hari, memungkinkan analisis tren harian.
   - **Konsumsi Bulanan**: Data penggunaan listrik per bulan untuk analisis jangka panjang.

2. **Data Waktu Nyata**
   - **Pengukuran Beban**: Data beban listrik yang digunakan dalam waktu nyata, termasuk pengukuran per jam.
   - **Distribusi Beban**: Informasi mengenai distribusi beban pada sistem 3 fasa untuk memastikan keseimbangan beban.

3. **Data Kualitas Energi**
   - **Tegangan dan Arus**: Pengukuran tegangan dan arus listrik untuk menganalisis kualitas energi.
   - **Faktor Daya**: Mengukur efisiensi penggunaan energi listrik.

4. **Data Smart Meter**
   - **Status Komunikasi**: Informasi mengenai status komunikasi smart meter yang digunakan untuk pengukuran.
   - **Tarif Listrik**: Data tarif listrik yang berlaku untuk analisis biaya.

# Source: DeepSeek V3

Berdasarkan informasi yang tersedia dari dokumen-dokumen yang diberikan, berikut adalah daftar data yang tersedia di Sistem Informasi Energi Listrik dan Air (ELISA) ITB, serta analisis data yang dapat dilakukan dari data tersebut:

### **Data yang Tersedia di ELISA:**

1. **Data Listrik:**
   - **Tegangan (Voltage):** Data tegangan listrik yang diukur dalam volt (V).
   - **Arus (Current):** Data arus listrik yang diukur dalam ampere (A).
   - **Daya Aktif (Active Power):** Data daya listrik yang dikonsumsi dalam watt (W) atau kilowatt (kW).
   - **Daya Reaktif (Reactive Power):** Data daya reaktif yang diukur dalam volt-ampere reaktif (VAR).
   - **Faktor Daya (Power Factor):** Data faktor daya yang menunjukkan efisiensi penggunaan daya listrik.
   - **Konsumsi Energi (Energy Consumption):** Data konsumsi energi listrik dalam kilowatt-hour (kWh).
   - **Frekuensi (Frequency):** Data frekuensi listrik yang diukur dalam hertz (Hz).
   - **Harmonik (Harmonics):** Data harmonik yang menunjukkan distorsi pada gelombang listrik.
   - **Data Historis (Historical Data):** Data historis konsumsi energi listrik harian, bulanan, dan tahunan.

2. **Data Air:**
   - **Flow Rate (Laju Aliran):** Data laju aliran air yang diukur dalam meter kubik per jam (m³/jam) atau liter per detik (L/s).
   - **Level Air (Water Level):** Data ketinggian air dalam tangki atau reservoir yang diukur dalam meter (m).
   - **Konsumsi Air (Water Consumption):** Data konsumsi air dalam meter kubik (m³) atau liter (L).
   - **Tekanan Air (Water Pressure):** Data tekanan air yang diukur dalam bar atau pascal (Pa).

3. **Data Operasional:**
   - **Status Pompa (Pump Status):** Data status operasional pompa air (ON/OFF).
   - **Status Sensor (Sensor Status):** Data status operasional sensor listrik dan air.
   - **Data Real-Time:** Data real-time dari penggunaan energi listrik dan air.

4. **Data Fakultas/Gedung:**
   - **Data Konsumsi Energi per Fakultas:** Data konsumsi energi listrik dan air berdasarkan fakultas atau unit kerja.
   - **Data Konsumsi Energi per Gedung:** Data konsumsi energi listrik dan air berdasarkan gedung.
   - **Data Konsumsi Energi per Lantai:** Data konsumsi energi listrik dan air berdasarkan lantai gedung.

### **Analisis Data yang Dapat Dilakukan:**

1. **Analisis Konsumsi Energi:**
   - **Pola Konsumsi Harian/Bulanan/Tahunan:** Menganalisis pola konsumsi energi listrik dan air dalam periode harian, bulanan, atau tahunan.
   - **Perbandingan Konsumsi Antar Fakultas/Gedung:** Membandingkan konsumsi energi listrik dan air antara fakultas atau gedung yang berbeda.
   - **Identifikasi Waktu Puncak Konsumsi:** Menentukan waktu-waktu puncak konsumsi energi listrik dan air.

2. **Analisis Efisiensi Energi:**
   - **Perhitungan Intensitas Konsumsi Energi (IKE):** Menghitung intensitas konsumsi energi (kWh/m²) untuk menilai efisiensi penggunaan energi.
   - **Perhitungan Energy Performance Indicator (EnPI):** Menghitung indikator kinerja energi (kWh/mahasiswa) untuk menilai efisiensi energi per mahasiswa.
   - **Analisis Faktor Daya:** Menganalisis faktor daya untuk menilai efisiensi penggunaan daya listrik.

3. **Deteksi Anomali:**
   - **Deteksi Kebocoran Daya:** Mengidentifikasi kebocoran daya listrik atau air berdasarkan data historis dan real-time.
   - **Deteksi Gangguan Listrik:** Mengidentifikasi gangguan listrik seperti lonjakan tegangan, arus lebih, atau harmonik yang tidak normal.
   - **Deteksi Kegagalan Pompa:** Mengidentifikasi kegagalan operasional pompa air berdasarkan status pompa dan data aliran air.

4. **Analisis Prediktif:**
   - **Prediksi Konsumsi Energi:** Memprediksi konsumsi energi listrik dan air di masa depan berdasarkan data historis.
   - **Prediksi Biaya Energi:** Memprediksi biaya energi listrik dan air berdasarkan tarif dan pola konsumsi.

5. **Analisis Visualisasi Data:**
   - **Heatmap Konsumsi Energi:** Menampilkan visualisasi heatmap untuk menunjukkan distribusi konsumsi energi listrik dan air.
   - **Grafik Konsumsi Harian/Bulanan:** Menampilkan grafik konsumsi energi listrik dan air dalam periode harian atau bulanan.
   - **Visualisasi 3 Fasa:** Menampilkan distribusi penggunaan energi listrik pada sistem 3 fasa (R, S, T).

6. **Analisis Manajemen Energi:**
   - **Rekomendasi Penghematan Energi:** Memberikan rekomendasi penghematan energi berdasarkan analisis pola konsumsi dan efisiensi.
   - **Optimasi Operasional Pompa:** Memberikan rekomendasi optimasi operasional pompa air berdasarkan data aliran dan tekanan.

7. **Analisis Keuangan:**
   - **Perhitungan Biaya Energi:** Menghitung biaya energi listrik dan air berdasarkan tarif dan konsumsi.
   - **Analisis Penghematan Biaya:** Menganalisis potensi penghematan biaya energi berdasarkan rekomendasi efisiensi.

### **Contoh Analisis Spesifik:**
- **Analisis Kesetimbangan Beban:** Menganalisis distribusi beban listrik pada sistem 3 fasa untuk memastikan kesetimbangan beban.
- **Analisis Kebocoran Air:** Mengidentifikasi kebocoran air berdasarkan perbedaan antara laju aliran masuk dan keluar.
- **Analisis Efisiensi Pompa:** Menganalisis efisiensi pompa air berdasarkan daya yang dikonsumsi dan laju aliran air yang dihasilkan.

Dengan data-data tersebut, ELISA dapat digunakan untuk melakukan berbagai analisis yang mendukung manajemen energi dan air yang lebih efisien di kampus ITB.

# Accessible API (Python)
async def async_fetch_now(faculty: str = "", building: str = "", floor: str = ""):
    """
    Fetch real-time energy data for the last hour and today summary.

    Args:
        faculty (str, optional): Filter by faculty code (e.g., 'FTI').
        building (str, optional): Filter by building code (e.g., 'LABTEK IV').
        floor (str, optional): Filter by floor code (e.g., 'LANTAI 1').
    Example:
        fetch_now(faculty="FTI", building="LABTEK IV", floor="LANTAI 1")
    Returns:
        dict: A dictionary containing the following keys:
            - "chart_data": A list of dictionaries, each containing:
                - "timestamp": The timestamp for the data point in 'YYYY-MM-DD HH:MM:SS' format.
                - "power": The power consumption at the given timestamp. (kW)
            - "today_data": A dictionary containing:
                - "total_daya": Total energy consumption for the day. (kWh)
                - "avg_daya": Average energy consumption per hour. (kWh/hour)
                - "total_cost": Total cost for the day. (Rupiah)
                - "avg_cost": Average cost per hour. (Rupiah/hour)
            - "prev_month_data": A dictionary containing:
                - "total_daya": Total energy consumption for the previous month. (kWh)
                - "total_cost": Total cost for the previous month. (Rupiah)
                - "day_daya": Daily energy consumption for the previous month. (kWh/day)
                - "day_cost": Daily cost for the previous month. (Rupiah/day)
                - "hour_daya": Hourly energy consumption for the previous month. (kWh/hour)
                - "hour_cost": Hourly cost for the previous month. (Rupiah/hour)
    """
    url = f"https://elisa.itb.ac.id/api/now?faculty={faculty}&building={building}&floor={floor}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")
 
async def async_fetch_daily(date: str, faculty: str = "", building: str = "", floor: str = ""):
    """
    Fetch daily energy and cost data for a specific date.

    Args:
        date (str): The date in 'YYYY-MM-DD' format.
        faculty (str, optional): Filter by faculty code (e.g., 'FTI').
        building (str, optional): Filter by building code (e.g., 'LABTEK IV').
        floor (str, optional): Filter by floor code (e.g., 'LANTAI 1').
    Example:
        fetch_daily("2023-03-01", faculty="FTI", building="LABTEK IV", floor="LANTAI 1")
    Returns:
        dict: A dictionary containing the following keys:
            - "chart_data": A list of dictionaries, each containing:
                - "timestamp": The timestamp for the data point in 'YYYY-MM-DD HH:MM:SS' format.
                - "R": Energy consumption for phase R. (kWh) 
                - "S": Energy consumption for phase S. (kWh)
                - "T": Energy consumption for phase T. (kWh)
            - "hourly_data": A list of dictionaries, each containing:
                - "hour": The hour of the day in 'HH:00' format, measured per one hour.
                - "cost": The cost for the hour. (Rupiah)
                - "energy": The energy consumption for the hour. (kWh)
            - "today_data": A dictionary containing:
                - "total_daya": Total energy consumption for the day. (kWh)
                - "avg_daya": Average energy consumption per hour. (kWh/hour)
                - "total_cost": Total cost for the day. (Rupiah)
                - "avg_cost": Average cost per hour. (Rupiah/hour)
            - "prev_month_data": A dictionary containing:
                - "total_daya": Total energy consumption for the month. (kWh)
                - "day_daya": Average energy consumption per day. (kWh/day)
                - "total_cost": Total cost for the month. (Rupiah)
                - "day_cost": Average cost per day. (Rupiah/day)
    """
    url = f"https://elisa.itb.ac.id/api/daily?date={date}&faculty={faculty}&building={building}&floor={floor}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")

async def async_fetch_monthly(date: str, faculty: str = "", building: str = "", floor: str = ""):
    """
    Fetch monthly energy and cost data for a specific month.

    Args:
        date (str): The month and year in 'YYYY-MM' format.
        faculty (str, optional): Filter by faculty code (e.g., 'FTI').
        building (str, optional): Filter by building code (e.g., 'LABTEK IV').
        floor (str, optional): Filter by floor code (e.g., 'LANTAI 1').

    Returns:
        dict: A dictionary containing the following keys:
            - "chart_data": A list of dictionaries, each containing:
                - "timestamp": The timestamp for the data point in 'YYYY-MM-DD HH:MM:SS' format.
                - "R": Energy consumption for phase R. (kWh) 
                - "S": Energy consumption for phase S. (kWh)
                - "T": Energy consumption for phase T. (kWh)
            - "daily_data": A list of dictionaries, each containing:
                - "timestamp": The timestamp for the data point in 'YYYY-MM-DD HH:MM:SS' format.
                - "cost": The cost for the day. (Rupiah)
                - "energy": The energy consumption for the day. (kWh)
                - "phase 1": Energy consumption for phase 1 (R). (kWh)
                - "phase 2": Energy consumption for phase 2 (S). (kWh)
                - "phase 3": Energy consumption for phase 3 (T). (kWh)
            - "month_data": A dictionary containing:
                - "total_daya": Total energy consumption for the month. (kWh)
                - "avg_daya": Average energy consumption per day. (kWh/day)
                - "total_cost": Total cost for the month. (Rupiah)
                - "avg_cost": Average cost per day. (Rupiah/day)
            - "prev_month_data": A dictionary containing:
                - "total_daya": Total energy consumption for the month. (kWh)
                - "day_daya": Average energy consumption per day. (kWh/day)
                - "total_cost": Total cost for the month. (Rupiah)
                - "day_cost": Average cost per day. (Rupiah/day)
    """
    url = f"https://elisa.itb.ac.id/api/monthly?date={date}&faculty={faculty}&building={building}&floor={floor}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")


async def async_fetch_heatmap(start: str, end: str, faculty: str = "", building: str = "", floor: str = ""):
    """
    Fetch heatmap data for energy usage over a specified date range.

    Args:
        faculty (str, optional): Filter by faculty code (e.g., 'FTI').
        building (str, optional): Filter by building code (e.g., 'LABTEK IV').
        floor (str, optional): Filter by floor code (e.g., 'LANTAI 1').
        start (str): Start date in 'YYYY-MM-DD' format.
        end (str): End date in 'YYYY-MM-DD' format.

    Returns:
        dict: A dictionary containing the following keys:
            - "dates": A dictionary with "start" and "end" dates.
                - "start": Date when the data collection started in 'YYYY-MM-DD' format.
                - "end": Date when the data collection ended in 'YYYY-MM-DD' format.
            - "heatmap": A list of dictionaries, each containing:
                - "day": The day of the week (1 = Sunday, 2 = Monday, ..., 7 = Saturday).
                - "hour": The hour of the day (0 = midnight, 23 = 11 PM).
                - "value": The energy consumption value for the given day and hour. (kWh)
    """
    url = f"https://elisa.itb.ac.id/api/heatmap?faculty={faculty}&start={start}&end={end}&building={building}&floor={floor}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")

async def async_fetch_compare(date: str):
    """
    Fetch energy and cost comparison data for all faculties for a specific month.

    Args:
        date (str): The month and year in 'YYYY-MM' format.

    Returns:
        dict: A dictionary containing the following keys:
            - "value": A list of dictionaries, each containing:
                - "fakultas": The faculty name. (FTI, FSRD, etc.)
                - "energy": The energy consumption for the faculty in the month. (kWh)
                - "cost": The cost associated with the energy consumption in the month. (Rupiah)
            - "data": A dictionary containing:
                - "max": A dictionary with the faculty with the maximum energy consumption and cost in the month.
                    - "fakultas": The faculty name. (FTI, FSRD, etc.)
                    - "energy": The maximum energy consumption in the month. (kWh)
                    - "cost": The maximum cost associated with the energy consumption in the month. (Rupiah)
                - "min": A dictionary with the faculty with the minimum energy consumption and cost in the month.
                    - "fakultas": The faculty name. (FTI, FSRD, etc.)
                    - "energy": The minimum energy consumption in the month. (kWh)
                    - "cost": The minimum cost associated with the energy consumption in the month. (Rupiah)
                - "total": A dictionary with the total energy consumption and cost across all faculties in the month.
                    - "energy": The total energy consumption in the month. (kWh)
                    - "cost": The total cost associated with the energy consumption in the month. (Rupiah)
                - "average": A dictionary he average energy consumption and cost across all faculties in the month.
                    - "energy": The average energy consumption in the month. (kWh)
                    - "cost": The average cost associated with the energy consumption in the month. (Rupiah)
            - "info": A list of dictionaries, each containing detailed information about a faculty:
                - "faculty": The faculty name. (FTI, FSRD, etc.)
                - "energy": The energy consumption in the month. (kWh)
                - "cost": The cost associated with the energy consumption in the month. (Rupiah)
                - "area": The area of the faculty. (m2)
                - "ike": The energy efficiency index. (kWh/m2)
                - "students": The number of students. 
                - "specific energy": The specific energy consumption per student. (kWh/student)
    """
    url = f"https://elisa.itb.ac.id/api/compare?date={date}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")

async def async_fetch_fakultas():
    """
    Fetch a list of faculties.
    

    Returns:
        dict: A dictionary containing the following key:
            - "fakultas": A list of dictionaries, each containing:
                - "label": The display name of the faculty.
                - "value": The code for the faculty.
    """
    url = "https://elisa.itb.ac.id/api/get-fakultas"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")

async def async_fetch_gedung(fakultas: str):
    """
    Fetch a list of buildings for a specific faculty.

    Args:
        fakultas (str): The faculty code (e.g., 'FTI').

    Returns:
        dict: A dictionary containing the following key:
            - "gedung": A list of dictionaries, each containing:
                - "value": The code for the building.
                - "label": The display name of the building.
    """
    url = f"https://elisa.itb.ac.id/api/get-gedung?fakultas={fakultas}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}")

async def async_fetch_lantai(fakultas: str, gedung: str):
    """
    Fetch a list of floors for a specific building.

    Args:
        fakultas (str): The faculty code (e.g., 'FTI').
        gedung (str): The building code (e.g., 'LABTEK IV').

    Returns:
        dict: A dictionary containing the following key:
            - "lantai": A list of dictionaries, each containing:
                - "label": The display name of the floor.
                - "value": The code for the floor.
    """
    url = f"https://elisa.itb.ac.id/api/get-lantai?fakultas={fakultas}&gedung={gedung}"
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch data: {response.status_code}") 


# Faculty and Building Available:
ITB has 3 campus, Bandung (Ganesha), Jatinangor, and Jakarta. Currently we only have Bandung (Ganesha) and some of Jatinangor data. We have these faculty and building data available, the default is in Bandung (Ganesha):
Data bangunan dan fakultas di luar yang disebutkan pada Faculty and Building du bawah ini, di luar itu fix tidak ada

Faculty and Building List:
1. All Unit:
Building List:
- BSC A
- BSC B
- CAD
- CADL
- CAS
- CRCS
- FISIKA
- Gardu CADL
- Gardu CIBE
- Gardu Kimia
- Gardu Konversi
- Gardu PPTI
- Gardu Teknik Sipil
- Gedung Energi
- Gedung Laboratorium Doping
- Gedung Perminyakan
- Gedung Teknik Lingkungan
- Jatinangor - Gedung Kuliah B
- Jatinangor - Gedung Kuliah C
- Jatinangor - Gedung Kuliah D
- Jatinangor - Gedung Kuliah E
- Jatinangor - Labtek 1A
- Jatinangor - Labtek 1B
- Jatinangor - Labtek 2A
- Jatinangor - Labtek 2B
- Jatinangor - Labtek 3
- Jatinangor - Labtek 5
- Kantor FSRD
- Kantor FTSL
- KIMIA
- Lab. Konversi
- Lab. Mekanika Fluida
- Lab. PLN-ITB
- LABTEK I
- LABTEK II / Gardu Mesin
- LABTEK III
- LABTEK IV
- LABTEK IX
- LABTEK V
- LABTEK VI
- LABTEK VII
- LABTEK VIII
- LABTEK X
- LABTEK XI
- Pompa Air - PAU
- Pompa Air - Sabuga
- PSDA
- SBM FREEPORT
- SBM MBA
2. FITB:
Building List:
- BSC B
- LABTEK IV
- LABTEK IX
3. FMIPA:
Building List:
- BSC A
- CAS
- FISIKA
- Gardu Kimia
- KIMIA
- LABTEK I
- LABTEK VIII
4. FSRD:
Building List:
- CAD
- CADL
- Gardu CADL
- Kantor FSRD
5. FTI:
Building List:
- CAS
- LABTEK III
- LABTEK V
- LABTEK VI
- LABTEK X
6. FTMD:
Building List:
- Gardu Konversi
- Gardu PPTI
- LABTEK II / Gardu Mesin
- LABTEK X
7. FTSL:
Building List:
- Gardu CIBE
- Gardu Teknik Sipil
- Gedung Teknik Lingkungan
- Kantor FTSL
- Lab. Mekanika Fluida
- LABTEK IX
- PSDA
8. FTTM:
Building List:
- BSC B
- Gedung Energi
- Gedung Perminyakan
- LABTEK IV
9. PLTS:
Building List:
- Villa Merah
10. SAPPK:
Building List:
- LABTEK IX
11. SBM:
Building List:
- SBM FREEPORT
- SBM Lama
- SBM MBA
12. SF:
Building List:
- Gedung Laboratorium Doping
- LABTEK VII
13. SITH:
Building List:
- LABTEK XI
14. PPNN:
Building List:
- CAS
15. STEI:
Building List:
- Lab. Konversi
- Lab. PLN-ITB
- LABTEK V
- LABTEK VIII
16. UNIT KERJA:
Building List:
- CADL
- CRCS
- Villa Merah

# Data yang Tidak Ada:
- Data bangunan dan fakultas di luar yang disebutkan pada Faculty and Building Available, di luar itu fix tidak ada
- Data di luar sistem ELISA, seperti cuaca, kalender perkuliahan spesifik, jadwal kuliah spesifik, tidak ada data ini
- Data cuaca tidak ada